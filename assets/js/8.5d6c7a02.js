(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{332:function(a,t,s){"use strict";s.r(t);var e=s(1),r=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("div",{staticClass:"content"},[s("p",[a._v("[TOC]")]),a._v(" "),s("h2",{attrs:{id:"函数的length属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数的length属性","aria-hidden":"true"}},[a._v("#")]),a._v(" 函数的length属性")]),a._v(" "),s("ul",[s("li",[a._v("指定了默认值以后，函数的length属性，将返回没有指定默认属性的参数的个数。")]),a._v(" "),s("li",[a._v("如果指定了默认值的参数不是尾参数，那么length属性不会把该参数之后的参数个数计入")]),a._v(" "),s("li",[a._v("如果指定了首参数的默认值，那么length属性为0。因为后面的参数个数不会计入length。")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("(function(...args){}).length //0\n")])])]),s("h2",{attrs:{id:"一、作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、作用域","aria-hidden":"true"}},[a._v("#")]),a._v(" 一、作用域")]),a._v(" "),s("p",[a._v("只要在函数的构造部分==声明了参数==，==并为参数设定了默认值==，函数进行声明和初始化时，参数会形成一个单独的作用域。")]),a._v(" "),s("ul",[s("li",[a._v("在此作用域内，即使该参数名称与全局变量冲突，也以该作用域中该参数的值为主。")]),a._v(" "),s("li",[a._v("如果没有在函数的构造部分==声明参数==，==只给参数设定了默认值==，那么该参数会指向全局中具有相同名称的全局变量，如果没有对应的全局变量，则会报错。")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var x = 1;\nfunction f(x,y=x){\n    console.log(y);\n}\nf(2) //2\n")])])]),s("p",[a._v("在此代码中，当函数被调用，会形成一个单独的作用域。在此作用域内，变量x=2将作为y的值，而不是全局变量x=1.")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("let x = 1;\nfunction f(y=x){\n    let x = 2;\n    console.log(y);\n}\nf() //1\n")])])]),s("p",[a._v("在此代码中，给函数参数y设定了默认值x，但没有去声明参数x，所以没有形成一个单独的作用域。")]),a._v(" "),s("p",[a._v("尽管在函数内有变量x=2，但是在函数被调用时，默认值y=x会指向函数外部的全局变量。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var x = 1;\nfunction foo(x, y = function() { x = 2; }) {\n  var x = 3;\n  y();\n  console.log(x);\n}\n\nfoo() // 3\nx // 1\n")])])]),s("p",[a._v("三个不同的作用域：")]),a._v(" "),s("p",[a._v("1️⃣ 全局变量x=1")]),a._v(" "),s("p",[a._v("2️⃣ 首参数x与参数y的内部匿名函数")]),a._v(" "),s("p",[a._v("3️⃣ foo函数内部的 var x = 3")]),a._v(" "),s("p",[a._v("var x与foo(x,y)不是同一个x，作用域也不同，在foo函数的输出部分，console.log(x)指向的是foo函数内部的var x = 3.")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var x = 1;\nfunction foo(x, y = function() { x = 2; }) {\n  x = 3;\n  y();\n  console.log(x);\n}\n\nfoo() // 2\nx // 1\n")])])]),s("p",[a._v("把foo函数内部的var去掉以后，foo函数内部的x指向的就是参数x。")]),a._v(" "),s("h2",{attrs:{id:"二、实际应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、实际应用","aria-hidden":"true"}},[a._v("#")]),a._v(" 二、实际应用")]),a._v(" "),s("h4",{attrs:{id:"_1-利用参数默认值，使某个参数被省略时抛出异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-利用参数默认值，使某个参数被省略时抛出异常","aria-hidden":"true"}},[a._v("#")]),a._v(" 1. 利用参数默认值，使某个参数被省略时抛出异常")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("function throwIfMissing(){\n   throw new Error('Missing parameter'); \n}\nfunction foo(mustProvided = throwIfMissing){\n    return mustProvided;\n}\nfoo(); //throw error\n")])])]),s("ul",[s("li",[a._v("当运行foo函数时，如果没有提供mustProvided参数，则函数参数默认值 -- throwIfMissing将会被执行，抛出异常。")]),a._v(" "),s("li",[a._v("相反地，如果需要标注某个参数可以被省略，那么就把它的默认值设为 ==undefined==")])]),a._v(" "),s("h4",{attrs:{id:"_2-rest参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-rest参数","aria-hidden":"true"}},[a._v("#")]),a._v(" 2. rest参数")]),a._v(" "),s("p",[a._v("rest参数形式为 ...变量名， 用于获取该函数中该变量之前的参数(也包括它自身),并把它们打包成一个数组。这样可以不用使用arguments对象。\n==注意:== rest参数不可放在中间，只能放在末尾")]),a._v(" "),s("p",[s("strong",[a._v("arguments与rest变量的区别")])]),a._v(" "),s("ul",[s("li",[a._v("rest参数只包括那些没有给出名称的参数，arguments包含所有参数；")]),a._v(" "),s("li",[a._v("arguments对象不是真正的array，而rest参数是Array的实例，可以直接应用sort, map, forEach, pop等方法；")]),a._v(" "),s("li",[a._v("arguments对象拥有一些自己额外的功能。")])]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("==求和函数==")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("    function sum(...rest){\n        let sum = 0;\n        for(var a of rest){\n            sum += rest;\n        }\n        return sum;\n    }\n    sum(1,2,3); //6\n")])])]),s("hr"),a._v(" "),s("p",[a._v("==数组元素push==")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("    function push(arr,...items){\n        items.forEach(function(item){\n            arr.push(item);\n            console.log(item);\n        });\n    }\n    var a = [];\n    push(a,1,2,3);\n")])])]),s("hr"),a._v(" "),s("h2",{attrs:{id:"三-严格模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三-严格模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 三. 严格模式")]),a._v(" "),s("ul",[s("li",[a._v("只要函数参数用了默认值，解构赋值，或扩展运算符，那么在函数内都不能显示设定严格模式  ('use strict')")])]),a._v(" "),s("p",[s("strong",[a._v("两种解决方法：")])]),a._v(" "),s("ol",[s("li",[a._v("在全局设置严格模式")]),a._v(" "),s("li",[a._v("在函数外嵌套一个无参立即执行的父函数，在父函数中设定严格模式。")])]),a._v(" "),s("h2",{attrs:{id:"四-name属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四-name属性","aria-hidden":"true"}},[a._v("#")]),a._v(" 四. name属性")]),a._v(" "),s("ul",[s("li",[a._v("函数的name属性，代表着该函数的函数名,而对于匿名函数，ES5和ES6有一些不同：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var f = function(){\n    //ES5\n    f.name;//''\n    //ES6\n    f.name; //'f'\n}\n")])])]),s("ul",[s("li",[a._v("Function构造函数返回的函数实例，name属性的值为==anonymous==")]),a._v(" "),s("li",[a._v("bind返回的函数，name属性值会加上==bound==前缀")])]),a._v(" "),s("h2",{attrs:{id:"五-arrow-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五-arrow-函数","aria-hidden":"true"}},[a._v("#")]),a._v(" 五. Arrow 函数")]),a._v(" "),s("p",[a._v("作为没有方法名的函数最合适")]),a._v(" "),s("h3",{attrs:{id:"_1-单参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-单参数","aria-hidden":"true"}},[a._v("#")]),a._v(" 1. 单参数")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var f = v => v;\n")])])]),s("p",[a._v("等同于：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var f = function(v){\n    return v;\n};\n")])])]),s("h3",{attrs:{id:"_2-不需要参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-不需要参数","aria-hidden":"true"}},[a._v("#")]),a._v(" 2. 不需要参数")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var f = () => 5;\n或\nvar f = _ => 5;\n")])])]),s("p",[a._v("等同于：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var f= function(){\n    return 5;\n}\n")])])]),s("h3",{attrs:{id:"_3-多个参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-多个参数","aria-hidden":"true"}},[a._v("#")]),a._v(" 3. 多个参数")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var f = (num1,num2) => num1+num2;\n")])])]),s("p",[a._v("等同于：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var f = function(num1,num2){\n    return num1+num2;\n}\n")])])]),s("h3",{attrs:{id:"_4-返回值个数大于1-返回一个对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-返回值个数大于1-返回一个对象","aria-hidden":"true"}},[a._v("#")]),a._v(" 4. 返回值个数大于1(返回一个对象)")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("//报错\nlet cache = id => {id:id, name: 'temp'}\n//花括号需加上括号\nlet cache = id => ({id:id, name: 'temp'})\n")])])]),s("p",[a._v("本来是作为一个对象返回，但是如果只用花括号括起来，就会被解析成一段代码块，一段代码块是无法直接返回的，所以需要用括号括起来，才能被解析为一个对象。")]),a._v(" "),s("h3",{attrs:{id:"_5-与变量解构结合使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-与变量解构结合使用","aria-hidden":"true"}},[a._v("#")]),a._v(" 5. 与变量解构结合使用")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("const full = ({first,last}) => first+'解构'+last;\n")])])]),s("p",[a._v("等同于")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("const full = function(person){\n    return person.first+'解构'+person.last;\n}\n")])])]),s("ul",[s("li",[a._v("[x] 原来参数不是first和last吗，怎么成了对象的属性？")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("person对象只是一个形参，传入的参数({first,last})是一个对象参数，这个对象参数可以与任意对象匹配，person只是举个例子。first，last是对象的属性。\n")])])]),s("h3",{attrs:{id:"_6-简单数组操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-简单数组操作","aria-hidden":"true"}},[a._v("#")]),a._v(" 6. 简单数组操作")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("// Easy array filtering, mapping, ...  \n  \nvar arr = [5, 6, 13, 0, 1, 18, 23];  \nvar sum = arr.reduce((a, b) => a + b);  // 66  \nvar even = arr.filter(v => v % 2 == 0); // [6, 0, 18]  \nvar double = arr.map(v => v * 2);       // [10, 12, 26, 0, 2, 36, 46]  \n")])])]),s("h3",{attrs:{id:"_7-箭头函数使用注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-箭头函数使用注意事项","aria-hidden":"true"}},[a._v("#")]),a._v(" 7. 箭头函数使用注意事项")]),a._v(" "),s("p",[a._v("(1) 函数体内的this总是指向函数执行时所在的对象，而不是谁调用它，this指向谁\nEg:")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("function foo(){\n    setTimeOut(() => {\n        console.log('id',this.id);\n    },100);\n}\nvar id = 21;\nfoo.call({id: 42}); //42\n")])])]),s("p",[a._v("在此代码中，函数foo的参数是一个箭头函数setTimeOut(), 其中的this.id指向的是foo对象的id")]),a._v(" "),s("p",[a._v("(2) 不可用new创建箭头函数")]),a._v(" "),s("p",[a._v("(3) 不可使用arguments对象，因为箭头函数体内没有这个对象，可用rest参数代替")]),a._v(" "),s("p",[a._v("Eg:")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("function replace(...params){\n    //使用arguments,函数形参可以不设置\n    console.log(arguments[2],arguments[0],arguments[1]);\n    //使用rest\n    console.log(params[2],params[0],params[1]);\n    \n}\nreplace(2,4,6); //6 2 4\nvar replace = (...params) ==> ({params[2],params[0],params[1]})\n")])])]),s("h2",{attrs:{id:"六、函数绑定运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、函数绑定运算符","aria-hidden":"true"}},[a._v("#")]),a._v(" 六、函数绑定运算符")]),a._v(" "),s("p",[s("strong",[a._v("函数绑定运算符是一组双冒号")]),a._v(" ( : : ), "),s("strong",[a._v("双冒号左边是一个对象，右边是一个函数，这个运算符表示将左边的对象作为上下文环境，绑定在右边的函数上")])]),a._v(" "),s("ul",[s("li",[a._v("如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在右边的对象上。")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var method = :: console.log;\n\n==>等同于\n\nvar method = console.log.bind(console);\n")])])])])}],!1,null,null,null);r.options.__file="ES6学习笔记（三）函数的扩展.md";t.default=r.exports}}]);