(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{346:function(t,a,e){"use strict";e.r(a);var r=e(1),s=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[t._v("广播应该在特定的场景中，去调用特定的对象，让特定的对象完成特定的任务，而\n不是在广播中完成特定的任务。如果广播中的逻辑处理耗费大量时间的话，会造成应用崩溃")]),t._v(" "),e("h2",{attrs:{id:"一、广播接收器的创建与注册"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、广播接收器的创建与注册","aria-hidden":"true"}},[t._v("#")]),t._v(" 一、广播接收器的创建与注册")]),t._v(" "),e("h3",{attrs:{id:"_1-创建接收器对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建接收器对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 创建接收器对象")]),t._v(" "),e("p",[t._v("创建一个类，继承 BroadcastReceiver, 重写onReceive方法，在其中处理接收广播后的逻辑")]),t._v(" "),e("h3",{attrs:{id:"_2-注册接收器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-注册接收器","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 注册接收器")]),t._v(" "),e("h4",{attrs:{id:"动态注册"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#动态注册","aria-hidden":"true"}},[t._v("#")]),t._v(" 动态注册")]),t._v(" "),e("p",[t._v("在 onCreated() 方法中进行广播接收器注册")]),t._v(" "),e("blockquote",[e("p",[t._v("(1) 创建IntentFilter作为监听过滤器，为其添加action属性作为监听目标的filter。")])]),t._v(" "),e("blockquote",[e("p",[t._v("(2) 新建接收器对象")])]),t._v(" "),e("blockquote",[e("p",[t._v("(3) 调用registerReceriver(networkChangeReceiver, intentFilter)进行注册。")])]),t._v(" "),e("ul",[e("li",[t._v("在 onDestroy() 方法中取消注册")])]),t._v(" "),e("blockquote",[e("p",[t._v("动态注册的广播一定要在活动销毁后取消注册：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("public void onDestroy() {\n    super.onDestroy();\n    unregisterReceiver(监听器对象);\n}\n")])])]),e("h4",{attrs:{id:"静态注册"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态注册","aria-hidden":"true"}},[t._v("#")]),t._v(" 静态注册")]),t._v(" "),e("p",[t._v("通过new -> Broadcast新建在AndroidManifest.xml中进行广播注册：")]),t._v(" "),e("ul",[e("li",[t._v("在"),e("code",[t._v("<application>")]),t._v("标签中：")])]),t._v(" "),e("div",{staticClass:"language-XML extra-class"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[t._v('<receiver\n    android:name = "广播接收器类的相对路径"\n    android:icon ...\n    android:label ...\n    ...\n>\n    '),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("intent-filter")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('\n        <action android:name = " {目标Action} " />\n    '),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("intent-filter")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("recevier")]),e("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("ul",[e("li",[t._v("静态注册的Receiver，它的生命周期从开机就已经开始。如果需要监听系统开机广播，需要在AndroidManifest.xml中加入Permission:")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<user-permisson android:name="android.permisson.RECEIVE_BOOT_COMPLETED" />\n')])])]),e("h2",{attrs:{id:"二、发送自定义广播"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、发送自定义广播","aria-hidden":"true"}},[t._v("#")]),t._v(" 二、发送自定义广播")]),t._v(" "),e("p",[e("strong",[t._v("自定义广播&内置广播")])]),t._v(" "),e("ul",[e("li",[t._v("广播根据其触发方式分为两种，一种是系统内置广播，如网络状态变化，系统会自动发送广播，开机，系统也会自动发送广播。另外一种则是自定义广播，用户需要自己定义触发广播的条件与广播的内容。")])]),t._v(" "),e("h3",{attrs:{id:"_1-发送标准广播"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-发送标准广播","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 发送标准广播")]),t._v(" "),e("ul",[e("li",[t._v("标准广播：发出广播后，所有为该广播内容注册过的接收器都能收到该广播（同时）")]),t._v(" "),e("li",[t._v("发送广播： 在Activity的context中有默认方法 sendBroadcast(intent) 可以发送广播，广播的相关属性被定义在intent中。")])]),t._v(" "),e("h3",{attrs:{id:"_2-发送有序广播"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-发送有序广播","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 发送有序广播")]),t._v(" "),e("ul",[e("li",[t._v("有序广播：发出广播后，各个接收器按照优先级高低接收广播，如果在通信中途广播被absort，则不继续传递")]),t._v(" "),e("li",[t._v("拦截广播：在接收器中调用abortBroadcast()，广播经过此拦截器后被拦截，不在向后传递")]),t._v(" "),e("li",[t._v("发送有序广播：在Activity中调用sendOrderBroadcast(intent,{option权限相关配置})")])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("在AndroidManifest.xml中配置广播的优先度:\n"),e("code",[t._v('<intent-filter android:priority="{优先度-int}">')])])])]),t._v(" "),e("h2",{attrs:{id:"三、使用本地广播"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、使用本地广播","aria-hidden":"true"}},[t._v("#")]),t._v(" 三、使用本地广播")]),t._v(" "),e("blockquote",[e("p",[t._v("前面所介绍的广播都是系统全局广播，在同一个系统中发出的所有广播可以被其他任何应用程序监听到。并且我们也可以接受来自于任何应用程序的广播，安全性较差。本地广播只能接受来自于本应用中发出的广播")])]),t._v(" "),e("h3",{attrs:{id:"_1-创建本地广播管理器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建本地广播管理器","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 创建本地广播管理器")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(this); //获取管理器实例\n")])])]),e("h3",{attrs:{id:"_2-发送本地广播"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-发送本地广播","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 发送本地广播")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("创建好广播intent对象，然后\nlocalBroadcastManager.sendBroadcast(intent); //发送本地广播\n")])])]),e("h3",{attrs:{id:"_3-本地广播接收器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-本地广播接收器","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 本地广播接收器")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('IntentFilter intentFilter = new IntentFilter();\nintentFilter.addAction("<The Specific Action>");//定义filter\nLocalReceiver localReceiver = new LocalReceiver(); //创建监听器对象\nlocalBroadcast.registerReceiver(localReceiver,intentFilter);//注册监听器\n\nclass LocalReceiver extends BroadcastReceiver {\n    @Override\n    public void onReceiver(Context context, Intent intent){\n        ..... //运行逻辑\n    }\n}\n\n')])])]),e("ul",[e("li",[t._v("本地广播Receiver无法通过静态注册来接收广播。")]),t._v(" "),e("li",[t._v("正在发送的广播不会离开Receiver所在的程序内部")]),t._v(" "),e("li",[t._v("其他程序发送的广播不会被本地广播Receiver接收到")]),t._v(" "),e("li",[t._v("发送本地广播比发送系统全局广播更高效")])])])}],!1,null,null,null);s.options.__file="Android开发学习笔记（六）广播机制.md";a.default=s.exports}}]);